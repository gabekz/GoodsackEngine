name: Build

on: [push, pull_request]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
# Linux Release Build
#
  build-linux:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        submodules: recursive

    - name: Package Cache
      uses: awalsh128/cache-apt-pkgs-action@latest
      with:
        packages: xorg-dev libglu1-mesa-dev libvulkan-dev libopenal1 libopenal-data libopenal-dev libpulse-dev ccache

    #- name: Prepare ccache timestamp
    #    id: ccache_cache_timestamp
    #    shell: cmake -P {0}
    #    run: |
    #    string(TIMESTAMP current_date "%Y-%m-%d-%H;%M;%S" UTC)
    #    message("::set-output name=timestamp::${current_date}")

    #- name: ccache cache files
    #    uses: actions/cache@v1.1.0
    #    with:
    #    path: .ccache
    #    key: ${ { matrix.config.name } }-ccache-${ { steps.ccache_cache_timestamp.outputs.timestamp } }
    #    restore-keys: |
    #      ${ { matrix.config.name } }-ccache-       version: 1.0

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Upload Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: artifact-build-testRunner
        path: ${{github.workspace}}/build/bin/testRunner

# Windows Release Build

#  build-windows:
#    runs-on: windows-latest
#
#    steps:
#    - name: Checkout
#      uses: actions/checkout@v3
#      with:
#        submodules: recursive
#
#    - name: Configure CMake
#      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
#      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
#      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
#
#    - name: Build
#      # Build your program with the given configuration
#      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

# TestRunner
#
  tests:
    runs-on: ubuntu-latest
    needs: build-linux
          
    steps:
    - name: Download Artifacts
      uses: actions/download-artifact@v3
      with:
        name: artifact-build-testRunner
        path: ${{github.workspace}}/dist/

    - name: Show Artifacts
      working-directory: ${{github.workspace}}/dist
      run: ls -R

    - name: TestRunner Permissions
      run: chmod +x ${{github.workspace}}/dist/testRunner

    - name: Linker Details
      run: ldd ${{github.workspace}}/dist/testRunner

    - name: Run Tests
      working-directory: ${{github.workspace}}/dist
      run: ${{github.workspace}}/dist/testRunner
